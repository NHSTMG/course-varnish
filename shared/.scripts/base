#!/bin/bash

script_command=$@
script=$(readlink -f $0)
script_dir=$(dirname $script)
script_id=$(md5sum "${script}" | head -c 8)
task_name="$(basename ${script_dir})"
me=$(cat /etc/who_am_i)

# ----------------------------------------------------------------------
# Constants

BASE_DIR=/home/ubuntu/shared 
VARNISH_SECRET_FILE=${BASE_DIR}/include/varnish-secret


# ----------------------------------------------------------------------

function report_success {
  echo "Congratulations! It seems to be working. Reporting to Hipchat!"
  hipchat_info "<strong>${me}</strong> successfully completed ${task_name} (${script_id})! $1"
}

function report_failure {
  echo "Sorry, but it seems like something is not quite right yet."
}

function fail {
  echo -e "Test failure: $@"
  exit 1
}

function root_or_die {
    if [ "$(id -u)" != "0" ]; then
        echo "This script must be run as root" 1>&2
        exit 1
    fi
}

function hipchat {
  MESSAGE="$(echo $@ | tr -d '\n\r')"
  COLOR=${HIPCHAT_COLOR:-green}
  NOTIFY=${HIPCHAT_NOTIFY:-false}
  
  curl -sS \
    -H 'Content-type: application/json' \
    -d "{\"color\":\"$COLOR\", \"message\":\"$MESSAGE\", \"message_format\":\"html\", \"notify\":$NOTIFY}" \
    https://nhst.hipchat.com/v2/room/3899151/notification?auth_token=jrHgnIU2JFfefu1eq7pjinJIXcKZsq3vGca13CJw
}

function hipchat_info {
  HIPCHAT_COLOR=green
  hipchat $@
}

# HTTP functions
function curl_get {
  curl -sS -X GET "$@"
}

function curl_get_headers { 
  curl -sS -X GET -I "$@"
}

function require_status_code () {
  URL="$1"
  EXPECTED_STATUS_CODE="$2"

  STATUS_CODE=$(curl -o /dev/null -w "%{http_code}\n" -s "${URL}")

  if [ "$STATUS_CODE" != "$EXPECTED_STATUS_CODE" ]; then
    echo "Expected status code ${EXPECTED_STATUS_CODE}, but got ${STATUS_CODE} for URL ${URL}"
    exit 1
  else
    echo "Found expected status code ${EXPECTED_STATUS_CODE} for URL ${URL}"
  fi
}

function require_header_present() {
  URL="$1"
  HEADER_NAME="$2"

  HEADERS=$(curl -X GET -I -q -s "${URL}" | tr -d '\r')

  if echo "$HEADERS" | grep -q "$HEADER_NAME"
  then
    echo "Found expected header \"${HEADER_NAME}\" for URL ${URL}"
  else
    echo "Expected header \"${HEADER_NAME}\" was not found for URL ${URL}"
    exit 1
  fi
}

function require_header_value () {
  URL="$1"
  HEADER_NAME="$2"
  HEADER_VALUE="$3"

  HEADERS=$(curl -X GET -I -q -s "${URL}" | tr -d '\r')

  if echo "$HEADERS" | grep -q "$HEADER_NAME"
  then
    #echo "Found header: \"${HEADER_NAME}\" for URL ${URL}"

    HEADER_LINE=$(echo "$HEADERS" | grep "$HEADER_NAME")
    if echo "$HEADER_LINE" | grep -q "$HEADER_VALUE"
    then
      echo "Found expected header with expected value \"${HEADER_LINE}\" for URL ${URL}"
    else
      echo "Found expected header \"${HEADER_NAME}\" for URL ${URL}, but not expected value \"${HEADER_VALUE}\""
      echo "Header line was: "
      echo ${HEADER_LINE}
      exit 1
    fi

  else
    echo "Expected header \"${HEADER_NAME}\" was not found for URL ${URL}"
    exit 1
  fi
}

function require_body_content () {
  URL="$1"
  EXPECTED_CONTENT="$2"

  CONTENT=$(curl -s "${URL}")

  if echo "$CONTENT" | grep -q "${EXPECTED_CONTENT}"
  then
      echo "Found expected string \"${EXPECTED_CONTENT}\" in response body for URL ${URL}"
  else
      echo "Expected string \"${EXPECTED_CONTENT}\" in response body for URL ${URL}, but did not find it"
      exit 1
  fi

}
